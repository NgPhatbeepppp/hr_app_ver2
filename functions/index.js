const functions = require("firebase-functions");
const admin = require("firebase-admin");

admin.initializeApp();
const db = admin.firestore();

exports.calculateSalaries = functions.pubsub.schedule("every 1st of month 00:00")
    .timeZone("Asia/Ho_Chi_Minh")
    .onRun(async (context) => {
      console.log("üîÑ B·∫Øt ƒë·∫ßu t√≠nh l∆∞∆°ng...");

      try {
        const employeesSnapshot = await db.collection("employees").get();
        const lastMonth = getLastMonthYear();
        const startOfLastMonth = getFirstDayOfLastMonth();
        const startOfThisMonth = getFirstDayOfThisMonth();

        for (const employeeDoc of employeesSnapshot.docs) {
          const employeeData = employeeDoc.data();
          const employeeId = employeeDoc.id;
          const monthlySalary = employeeData.salary || 0; // L∆∞∆°ng th√°ng

          console.log(`üìå T√≠nh l∆∞∆°ng cho ${employeeId} th√°ng ${lastMonth}`);

          // L·∫•y danh s√°ch ch·∫•m c√¥ng th√°ng tr∆∞·ªõc
          const attendanceSnapshot = await db.collection("employees")
              .doc(employeeId)
              .collection("attendance")
              .where("checkInTime", ">=", admin.firestore.Timestamp.fromDate(startOfLastMonth))
              .where("checkInTime", "<", admin.firestore.Timestamp.fromDate(startOfThisMonth))
              .get();

          let totalHours = 0;
          const workDays = new Set(); // ƒê·∫øm s·ªë ng√†y l√†m vi·ªác th·ª±c t·∫ø

          attendanceSnapshot.forEach((doc) => {
            const data = doc.data();
            if (data.checkInTime && data.checkOutTime) {
              const checkIn = data.checkInTime.toDate();
              const checkOut = data.checkOutTime.toDate();
              const hoursWorked = (checkOut - checkIn) / (1000 * 60 * 60);
              totalHours += hoursWorked;

              // L∆∞u l·∫°i ng√†y l√†m vi·ªác (ƒë·ªÉ kh√¥ng tr√πng l·∫∑p)
              workDays.add(checkIn.toISOString().split("T")[0]);
            }
          });

          const totalWorkDays = workDays.size; // S·ªë ng√†y l√†m vi·ªác th·ª±c t·∫ø
          const avgHoursPerDay = totalWorkDays > 0 ? totalHours / totalWorkDays : 8; // Gi·∫£ ƒë·ªãnh 8h n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu
          const expectedWorkDays = getExpectedWorkDays(startOfLastMonth); // S·ªë ng√†y l√†m vi·ªác chu·∫©n c·ªßa th√°ng
          const expectedWorkHours = expectedWorkDays * avgHoursPerDay; // Gi·ªù l√†m chu·∫©n

          // T√≠nh l∆∞∆°ng d·ª±a tr√™n t·ªïng s·ªë gi·ªù l√†m th·ª±c t·∫ø
          const totalSalary = (totalHours / expectedWorkHours) * monthlySalary;

          console.log(`‚úÖ Nh√¢n vi√™n ${employeeId}: L√†m ${totalHours.toFixed(2)} gi·ªù, l∆∞∆°ng = ${totalSalary.toFixed(2)}`);

          // L∆∞u k·∫øt qu·∫£ v√†o Firestore
          await db.collection("salaries").doc(`${employeeId}_${lastMonth}`).set({
            employeeId,
            month: lastMonth,
            totalHours: totalHours.toFixed(2),
            totalSalary: totalSalary.toFixed(2),
            workDays: totalWorkDays,
            expectedWorkHours: expectedWorkHours.toFixed(2),
            timestamp: admin.firestore.FieldValue.serverTimestamp(),
          });
        }

        console.log("üéâ T√≠nh l∆∞∆°ng ho√†n t·∫•t!");
      } catch (error) {
        console.error("‚ùå L·ªói khi t√≠nh l∆∞∆°ng:", error);
      }
    });

/**
 * L·∫•y ng√†y ƒë·∫ßu ti√™n c·ªßa th√°ng tr∆∞·ªõc.
 * @return {Date} Ng√†y ƒë·∫ßu ti√™n c·ªßa th√°ng tr∆∞·ªõc.
 */
function getFirstDayOfLastMonth() {
  const now = new Date();
  return new Date(now.getFullYear(), now.getMonth() - 1, 1);
}

/**
   * L·∫•y ng√†y ƒë·∫ßu ti√™n c·ªßa th√°ng hi·ªán t·∫°i.
   * @return {Date} Ng√†y ƒë·∫ßu ti√™n c·ªßa th√°ng n√†y.
   */
function getFirstDayOfThisMonth() {
  const now = new Date();
  return new Date(now.getFullYear(), now.getMonth(), 1);
}

/**
   * L·∫•y chu·ªói ƒë·ªãnh d·∫°ng "YYYY-MM" c·ªßa th√°ng tr∆∞·ªõc.
   * @return {string} Chu·ªói "YYYY-MM" c·ªßa th√°ng tr∆∞·ªõc.
   */
function getLastMonthYear() {
  const now = new Date();
  now.setMonth(now.getMonth() - 1);
  return `${now.getFullYear()}-${(now.getMonth() + 1).toString().padStart(2, "0")}`;
}

/**
   * T√≠nh s·ªë ng√†y l√†m vi·ªác (lo·∫°i tr·ª´ th·ª© 7, ch·ªß nh·∫≠t) trong th√°ng.
   * @param {Date} startDate - Ng√†y b·∫Øt ƒë·∫ßu t√≠nh.
   * @return {number} S·ªë ng√†y l√†m vi·ªác trong th√°ng.
   */
function getExpectedWorkDays(startDate) {
  const date = new Date(startDate);
  let workDays = 0;
  while (date.getMonth() === startDate.getMonth()) {
    const day = date.getDay();
    if (day !== 0 && day !== 6) { // Kh√¥ng t√≠nh th·ª© 7, ch·ªß nh·∫≠t
      workDays++;
    }
    date.setDate(date.getDate() + 1);
  }
  return workDays;
}
